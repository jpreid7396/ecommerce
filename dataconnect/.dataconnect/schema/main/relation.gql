extend type Collection {
  """
  ✨ List `ProductCollection` objects in a one-to-many relationship (where `ProductCollection`.`collection` is this object).
  """
  productCollections_on_collection(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductCollection_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductCollection_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductCollection_Having
  ): [ProductCollection!]! @fdc_generated(from: "ProductCollection.collection", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Product` objects using `ProductCollection` as the join table (a `ProductCollection` object exists where its `collection` is this and its `product` is that).
  """
  products_via_ProductCollection(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductCollection_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductCollection_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductCollection_Having
  ): [Product!]! @fdc_generated(from: "ProductCollection", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Collection", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Collection` table.
  """
  _count: Int! @fdc_generated(from: "Collection.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Collection` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Collection.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Collection` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Collection.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Collection` table where the `featuredImageId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  featuredImageId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Collection.featuredImageId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Collection` table where the `handle` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  handle_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Collection.handle", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Collection` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Collection.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Collection` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Collection.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Collection` table where the `page` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  page_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Collection.page", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Collection` table where the `seoId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  seoId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Collection.seoId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Collection` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Collection.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Collection` table.
  """
  createdAt_min: Date @fdc_generated(from: "Collection.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Collection` table.
  """
  updatedAt_min: Date @fdc_generated(from: "Collection.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Collection` table.
  """
  createdAt_max: Date @fdc_generated(from: "Collection.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Collection` table.
  """
  updatedAt_max: Date @fdc_generated(from: "Collection.updatedAt", purpose: QUERY_MAX)
}
extend type Customer {
  """
  ✨ List `Order` objects in a one-to-many relationship (where `Order`.`customer` is this object).
  """
  orders_on_customer(
    """
    Filter condition to narrow down the query results.
    """
    where: Order_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Order_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Order_Having
  ): [Order!]! @fdc_generated(from: "Order.customer", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ProductReview` objects in a one-to-many relationship (where `ProductReview`.`customer` is this object).
  """
  productReviews_on_customer(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductReview_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductReview_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductReview_Having
  ): [ProductReview!]! @fdc_generated(from: "ProductReview.customer", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Product` objects using `ProductReview` as the join table (a `ProductReview` object exists where its `customer` is this and its `product` is that).
  """
  products_via_ProductReview(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductReview_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductReview_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductReview_Having
  ): [Product!]! @fdc_generated(from: "ProductReview", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Customer", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Customer` table.
  """
  _count: Int! @fdc_generated(from: "Customer.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Customer` table where the `acceptsMarketing` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  acceptsMarketing_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Customer.acceptsMarketing", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Customer` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Customer.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Customer` table where the `firstName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  firstName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Customer.firstName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Customer` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Customer.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Customer` table where the `lastName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  lastName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Customer.lastName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Customer` table where the `phone` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  phone_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Customer.phone", purpose: QUERY_COUNT)
}
extend type Order {
  """
  ✨ List `OrderItem` objects in a one-to-many relationship (where `OrderItem`.`order` is this object).
  """
  orderItems_on_order(
    """
    Filter condition to narrow down the query results.
    """
    where: OrderItem_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [OrderItem_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: OrderItem_Having
  ): [OrderItem!]! @fdc_generated(from: "OrderItem.order", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Order", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Order` table.
  """
  _count: Int! @fdc_generated(from: "Order.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `chargeId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  chargeId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.chargeId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `customerId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  customerId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.customerId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `financialStatus` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  financialStatus_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.financialStatus", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `fulfillmentStatus` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  fulfillmentStatus_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.fulfillmentStatus", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `paymentIntentId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  paymentIntentId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.paymentIntentId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `processedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  processedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.processedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `receiptUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  receiptUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.receiptUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `subtotalPrice` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subtotalPrice_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.subtotalPrice", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `totalPrice` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  totalPrice_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.totalPrice", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `totalShippingPrice` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  totalShippingPrice_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.totalShippingPrice", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `totalTax` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  totalTax_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.totalTax", purpose: QUERY_COUNT)
  """
  ✨ Sum the `subtotalPrice` field in the `Order` table.
  """
  subtotalPrice_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.subtotalPrice", purpose: QUERY_SUM)
  """
  ✨ Sum the `totalPrice` field in the `Order` table.
  """
  totalPrice_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.totalPrice", purpose: QUERY_SUM)
  """
  ✨ Sum the `totalShippingPrice` field in the `Order` table.
  """
  totalShippingPrice_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.totalShippingPrice", purpose: QUERY_SUM)
  """
  ✨ Sum the `totalTax` field in the `Order` table.
  """
  totalTax_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.totalTax", purpose: QUERY_SUM)
  """
  ✨ Average the `subtotalPrice` field in the `Order` table.
  """
  subtotalPrice_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.subtotalPrice", purpose: QUERY_AVG)
  """
  ✨ Average the `totalPrice` field in the `Order` table.
  """
  totalPrice_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.totalPrice", purpose: QUERY_AVG)
  """
  ✨ Average the `totalShippingPrice` field in the `Order` table.
  """
  totalShippingPrice_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.totalShippingPrice", purpose: QUERY_AVG)
  """
  ✨ Average the `totalTax` field in the `Order` table.
  """
  totalTax_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.totalTax", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `processedAt` field in the `Order` table.
  """
  processedAt_min: Date @fdc_generated(from: "Order.processedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `subtotalPrice` field in the `Order` table.
  """
  subtotalPrice_min: Float @fdc_generated(from: "Order.subtotalPrice", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `totalPrice` field in the `Order` table.
  """
  totalPrice_min: Float @fdc_generated(from: "Order.totalPrice", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `totalShippingPrice` field in the `Order` table.
  """
  totalShippingPrice_min: Float @fdc_generated(from: "Order.totalShippingPrice", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `totalTax` field in the `Order` table.
  """
  totalTax_min: Float @fdc_generated(from: "Order.totalTax", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `processedAt` field in the `Order` table.
  """
  processedAt_max: Date @fdc_generated(from: "Order.processedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `subtotalPrice` field in the `Order` table.
  """
  subtotalPrice_max: Float @fdc_generated(from: "Order.subtotalPrice", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `totalPrice` field in the `Order` table.
  """
  totalPrice_max: Float @fdc_generated(from: "Order.totalPrice", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `totalShippingPrice` field in the `Order` table.
  """
  totalShippingPrice_max: Float @fdc_generated(from: "Order.totalShippingPrice", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `totalTax` field in the `Order` table.
  """
  totalTax_max: Float @fdc_generated(from: "Order.totalTax", purpose: QUERY_MAX)
}
extend type OrderItem {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "OrderItem", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `OrderItem` table.
  """
  _count: Int! @fdc_generated(from: "OrderItem.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `orderId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  orderId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.orderId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `price` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  price_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.price", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `productId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.productId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `quantity` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  quantity_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_COUNT)
  """
  ✨ Sum the `price` field in the `OrderItem` table.
  """
  price_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrderItem.price", purpose: QUERY_SUM)
  """
  ✨ Sum the `quantity` field in the `OrderItem` table.
  """
  quantity_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_SUM)
  """
  ✨ Average the `price` field in the `OrderItem` table.
  """
  price_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrderItem.price", purpose: QUERY_AVG)
  """
  ✨ Average the `quantity` field in the `OrderItem` table.
  """
  quantity_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `price` field in the `OrderItem` table.
  """
  price_min: Float @fdc_generated(from: "OrderItem.price", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `quantity` field in the `OrderItem` table.
  """
  quantity_min: Int @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `price` field in the `OrderItem` table.
  """
  price_max: Float @fdc_generated(from: "OrderItem.price", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `quantity` field in the `OrderItem` table.
  """
  quantity_max: Int @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_MAX)
}
extend type Product {
  """
  ✨ List `OrderItem` objects in a one-to-many relationship (where `OrderItem`.`product` is this object).
  """
  orderItems_on_product(
    """
    Filter condition to narrow down the query results.
    """
    where: OrderItem_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [OrderItem_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: OrderItem_Having
  ): [OrderItem!]! @fdc_generated(from: "OrderItem.product", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ProductCollection` objects in a one-to-many relationship (where `ProductCollection`.`product` is this object).
  """
  productCollections_on_product(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductCollection_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductCollection_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductCollection_Having
  ): [ProductCollection!]! @fdc_generated(from: "ProductCollection.product", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ProductImage` objects in a one-to-many relationship (where `ProductImage`.`product` is this object).
  """
  productImages_on_product(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductImage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductImage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductImage_Having
  ): [ProductImage!]! @fdc_generated(from: "ProductImage.product", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ProductOption` objects in a one-to-many relationship (where `ProductOption`.`product` is this object).
  """
  productOptions_on_product(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductOption_Having
  ): [ProductOption!]! @fdc_generated(from: "ProductOption.product", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ProductReview` objects in a one-to-many relationship (where `ProductReview`.`product` is this object).
  """
  productReviews_on_product(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductReview_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductReview_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductReview_Having
  ): [ProductReview!]! @fdc_generated(from: "ProductReview.product", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ProductVariant` objects in a one-to-many relationship (where `ProductVariant`.`product` is this object).
  """
  productVariants_on_product(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductVariant_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductVariant_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductVariant_Having
  ): [ProductVariant!]! @fdc_generated(from: "ProductVariant.product", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Collection` objects using `ProductCollection` as the join table (a `ProductCollection` object exists where its `product` is this and its `collection` is that).
  """
  collections_via_ProductCollection(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductCollection_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductCollection_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductCollection_Having
  ): [Collection!]! @fdc_generated(from: "ProductCollection", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Customer` objects using `ProductReview` as the join table (a `ProductReview` object exists where its `product` is this and its `customer` is that).
  """
  customers_via_ProductReview(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductReview_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductReview_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductReview_Having
  ): [Customer!]! @fdc_generated(from: "ProductReview", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Product", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Product` table.
  """
  _count: Int! @fdc_generated(from: "Product.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `availableForSale` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  availableForSale_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.availableForSale", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `descriptionEmbedding` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  descriptionEmbedding_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.descriptionEmbedding", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `featuredImageId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  featuredImageId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.featuredImageId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `handle` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  handle_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.handle", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `productType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.productType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `seoId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  seoId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.seoId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `titleEmbedding` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  titleEmbedding_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.titleEmbedding", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.title", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Product` table.
  """
  createdAt_min: Date @fdc_generated(from: "Product.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Product` table.
  """
  updatedAt_min: Date @fdc_generated(from: "Product.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Product` table.
  """
  createdAt_max: Date @fdc_generated(from: "Product.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Product` table.
  """
  updatedAt_max: Date @fdc_generated(from: "Product.updatedAt", purpose: QUERY_MAX)
}
extend type ProductCollection {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ProductCollection", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ProductCollection` table.
  """
  _count: Int! @fdc_generated(from: "ProductCollection.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductCollection` table where the `collectionId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  collectionId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductCollection.collectionId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductCollection` table where the `displayPosition` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayPosition_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductCollection.displayPosition", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductCollection` table where the `productId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductCollection.productId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `displayPosition` field in the `ProductCollection` table.
  """
  displayPosition_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "ProductCollection.displayPosition", purpose: QUERY_SUM)
  """
  ✨ Average the `displayPosition` field in the `ProductCollection` table.
  """
  displayPosition_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ProductCollection.displayPosition", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `displayPosition` field in the `ProductCollection` table.
  """
  displayPosition_min: Int @fdc_generated(from: "ProductCollection.displayPosition", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `displayPosition` field in the `ProductCollection` table.
  """
  displayPosition_max: Int @fdc_generated(from: "ProductCollection.displayPosition", purpose: QUERY_MAX)
}
extend type ProductImage {
  """
  ✨ List `Collection` objects in a one-to-many relationship (where `Collection`.`featuredImage` is this object).
  """
  collections_on_featuredImage(
    """
    Filter condition to narrow down the query results.
    """
    where: Collection_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Collection_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Collection_Having
  ): [Collection!]! @fdc_generated(from: "Collection.featuredImage", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Product` objects in a one-to-many relationship (where `Product`.`featuredImage` is this object).
  """
  products_on_featuredImage(
    """
    Filter condition to narrow down the query results.
    """
    where: Product_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Product_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Product_Having
  ): [Product!]! @fdc_generated(from: "Product.featuredImage", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ProductImage", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ProductImage` table.
  """
  _count: Int! @fdc_generated(from: "ProductImage.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductImage` table where the `altText` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  altText_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductImage.altText", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductImage` table where the `displayPosition` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayPosition_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductImage.displayPosition", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductImage` table where the `featured` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  featured_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductImage.featured", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductImage` table where the `height` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  height_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductImage.height", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductImage` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductImage.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductImage` table where the `productId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductImage.productId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductImage` table where the `url` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  url_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductImage.url", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductImage` table where the `width` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  width_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductImage.width", purpose: QUERY_COUNT)
  """
  ✨ Sum the `displayPosition` field in the `ProductImage` table.
  """
  displayPosition_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "ProductImage.displayPosition", purpose: QUERY_SUM)
  """
  ✨ Sum the `height` field in the `ProductImage` table.
  """
  height_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "ProductImage.height", purpose: QUERY_SUM)
  """
  ✨ Sum the `width` field in the `ProductImage` table.
  """
  width_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "ProductImage.width", purpose: QUERY_SUM)
  """
  ✨ Average the `displayPosition` field in the `ProductImage` table.
  """
  displayPosition_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ProductImage.displayPosition", purpose: QUERY_AVG)
  """
  ✨ Average the `height` field in the `ProductImage` table.
  """
  height_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ProductImage.height", purpose: QUERY_AVG)
  """
  ✨ Average the `width` field in the `ProductImage` table.
  """
  width_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ProductImage.width", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `displayPosition` field in the `ProductImage` table.
  """
  displayPosition_min: Int @fdc_generated(from: "ProductImage.displayPosition", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `height` field in the `ProductImage` table.
  """
  height_min: Int @fdc_generated(from: "ProductImage.height", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `width` field in the `ProductImage` table.
  """
  width_min: Int @fdc_generated(from: "ProductImage.width", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `displayPosition` field in the `ProductImage` table.
  """
  displayPosition_max: Int @fdc_generated(from: "ProductImage.displayPosition", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `height` field in the `ProductImage` table.
  """
  height_max: Int @fdc_generated(from: "ProductImage.height", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `width` field in the `ProductImage` table.
  """
  width_max: Int @fdc_generated(from: "ProductImage.width", purpose: QUERY_MAX)
}
extend type ProductOption {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ProductOption", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ProductOption` table.
  """
  _count: Int! @fdc_generated(from: "ProductOption.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductOption` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductOption.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductOption` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductOption.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductOption` table where the `productId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductOption.productId", purpose: QUERY_COUNT)
}
extend type ProductReview {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ProductReview", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ProductReview` table.
  """
  _count: Int! @fdc_generated(from: "ProductReview.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductReview` table where the `contentEmbedding` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contentEmbedding_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductReview.contentEmbedding", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductReview` table where the `content` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  content_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductReview.content", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductReview` table where the `customerId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  customerId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductReview.customerId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductReview` table where the `date` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  date_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductReview.date", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductReview` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductReview.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductReview` table where the `productId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductReview.productId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductReview` table where the `rating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  rating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductReview.rating", purpose: QUERY_COUNT)
  """
  ✨ Sum the `rating` field in the `ProductReview` table.
  """
  rating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "ProductReview.rating", purpose: QUERY_SUM)
  """
  ✨ Average the `rating` field in the `ProductReview` table.
  """
  rating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ProductReview.rating", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `date` field in the `ProductReview` table.
  """
  date_min: Date @fdc_generated(from: "ProductReview.date", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `rating` field in the `ProductReview` table.
  """
  rating_min: Int @fdc_generated(from: "ProductReview.rating", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `date` field in the `ProductReview` table.
  """
  date_max: Date @fdc_generated(from: "ProductReview.date", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `rating` field in the `ProductReview` table.
  """
  rating_max: Int @fdc_generated(from: "ProductReview.rating", purpose: QUERY_MAX)
}
extend type ProductVariant {
  """
  ✨ List `SelectedOption` objects in a one-to-many relationship (where `SelectedOption`.`productVariant` is this object).
  """
  selectedOptions_on_productVariant(
    """
    Filter condition to narrow down the query results.
    """
    where: SelectedOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SelectedOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: SelectedOption_Having
  ): [SelectedOption!]! @fdc_generated(from: "SelectedOption.productVariant", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ProductVariant", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ProductVariant` table.
  """
  _count: Int! @fdc_generated(from: "ProductVariant.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductVariant` table where the `availableForSale` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  availableForSale_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductVariant.availableForSale", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductVariant` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductVariant.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductVariant` table where the `inventoryQuantity` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  inventoryQuantity_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductVariant.inventoryQuantity", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductVariant` table where the `price` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  price_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductVariant.price", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductVariant` table where the `productId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductVariant.productId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductVariant` table where the `sku` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  sku_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductVariant.sku", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ProductVariant` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ProductVariant.title", purpose: QUERY_COUNT)
  """
  ✨ Sum the `inventoryQuantity` field in the `ProductVariant` table.
  """
  inventoryQuantity_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "ProductVariant.inventoryQuantity", purpose: QUERY_SUM)
  """
  ✨ Sum the `price` field in the `ProductVariant` table.
  """
  price_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ProductVariant.price", purpose: QUERY_SUM)
  """
  ✨ Average the `inventoryQuantity` field in the `ProductVariant` table.
  """
  inventoryQuantity_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ProductVariant.inventoryQuantity", purpose: QUERY_AVG)
  """
  ✨ Average the `price` field in the `ProductVariant` table.
  """
  price_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ProductVariant.price", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `inventoryQuantity` field in the `ProductVariant` table.
  """
  inventoryQuantity_min: Int @fdc_generated(from: "ProductVariant.inventoryQuantity", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `price` field in the `ProductVariant` table.
  """
  price_min: Float @fdc_generated(from: "ProductVariant.price", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `inventoryQuantity` field in the `ProductVariant` table.
  """
  inventoryQuantity_max: Int @fdc_generated(from: "ProductVariant.inventoryQuantity", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `price` field in the `ProductVariant` table.
  """
  price_max: Float @fdc_generated(from: "ProductVariant.price", purpose: QUERY_MAX)
}
extend type SEO {
  """
  ✨ List `Collection` objects in a one-to-many relationship (where `Collection`.`seo` is this object).
  """
  collections_on_seo(
    """
    Filter condition to narrow down the query results.
    """
    where: Collection_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Collection_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Collection_Having
  ): [Collection!]! @fdc_generated(from: "Collection.seo", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Product` objects in a one-to-many relationship (where `Product`.`seo` is this object).
  """
  products_on_seo(
    """
    Filter condition to narrow down the query results.
    """
    where: Product_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Product_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Product_Having
  ): [Product!]! @fdc_generated(from: "Product.seo", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "SEO", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `SEO` table.
  """
  _count: Int! @fdc_generated(from: "SEO.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SEO` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SEO.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SEO` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SEO.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SEO` table where the `keywords` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  keywords_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SEO.keywords", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SEO` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SEO.title", purpose: QUERY_COUNT)
}
extend type SelectedOption {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "SelectedOption", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `SelectedOption` table.
  """
  _count: Int! @fdc_generated(from: "SelectedOption.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SelectedOption` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SelectedOption.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SelectedOption` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SelectedOption.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SelectedOption` table where the `productVariantId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productVariantId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SelectedOption.productVariantId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SelectedOption` table where the `value` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  value_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SelectedOption.value", purpose: QUERY_COUNT)
}
